#!/bin/bash

export CFLAGS="-O2 "
export CXXFLAGS="-O2 "

set -e
PKG_VER=19.1.2
LLVM_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$PKG_VER/llvm-$PKG_VER.src.tar.xz
CLANG_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$PKG_VER/clang-$PKG_VER.src.tar.xz
CMAKE_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$PKG_VER/cmake-$PKG_VER.src.tar.xz
THIRDPARTY_URL=https://github.com/llvm/llvm-project/releases/download/llvmorg-$PKG_VER/third-party-$PKG_VER.src.tar.xz

LLVM_TAR=$(echo $LLVM_URL | sed -r 's|(.*)/||')
CLANG_TAR=$(echo $CLANG_URL | sed -r 's|(.*)/||')
CMAKE_TAR=$(echo $CMAKE_URL | sed -r 's|(.*)/||')
THIRDPARTY_TAR=$(echo $THIRDPARTY_URL | sed -r 's|(.*)/||')

LLVM_DIR=$(echo $LLVM_TAR | sed 's|.tar.*||g')
CLANG_DIR=$(echo $CLANG_TAR | sed 's|.tar.*||g')
PACKAGE=lib32-llvm
PACKAGE2=lib32-clang

export CFLAGS+=" -m32 -g1" 
export CXXFLAGS+=" -m32 -g1"
export PKG_CONFIG="i686-pc-linux-gnu-pkg-config"


# Get Package

cd /blfs/builds
wget $LLVM_URL
wget $CMAKE_URL
wget $CLANG_URL
wget $THIRDPARTY_URL
tar -xvf $LLVM_TAR
tar -xvf $CMAKE_TAR
tar -xvf $CLANG_TAR
tar -xvf $THIRDPARTY_TAR
# Needed to ensure that llvm can find cmake
mv cmake-$PKG_VER.src cmake
# New things for llvm
mv third-party-$PKG_VER.src third-party
cd $LLVM_DIR

# # Build LLVM Base
 grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'
 mkdir build
 cd build
 CFLAGS+=' -g1'
 CXXFLAGS+=' -g1'
 
 
 CC=gcc CXX=g++                                  \
 cmake -DCMAKE_INSTALL_PREFIX=/usr               \
       -DLLVM_ENABLE_FFI=ON                      \
       -DCMAKE_BUILD_TYPE=Release                \
       -DLLVM_BUILD_LLVM_DYLIB=ON                \
       -DLLVM_LINK_LLVM_DYLIB=ON                 \
       -DLLVM_ENABLE_RTTI=ON                     \
       -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
       -DLLVM_BINUTILS_INCDIR=/usr/include       \
       -DLLVM_INCLUDE_BENCHMARKS=OFF             \
       -DLLVM_LIBDIR_SUFFIX=32                   \
       -DCMAKE_INSTALL_LIBDIR=/usr/lib32         \
       -Wno-dev -G Ninja ..         
 
 
 
 ninja
 
 
 # Install LLVM Base
 mkdir -p /pkgs/$PACKAGE/usr/lib32
 DESTDIR=$PWD/DESTDIR ninja install
 
 # Temporarly move some files
 mv DESTDIR/usr/bin/llvm-config DESTDIR/usr/lib32/llvm-config32
 mv DESTDIR/usr/include/llvm/Config/llvm-config.h DESTDIR/usr/lib32/llvm-config-32.h
 
 # Remove stuff
 rm -rf DESTDIR/usr/{bin,include,share/{doc,man,llvm,opt-viewer}}
 # Move them back
 mkdir -p DESTDIR/usr/bin
 mkdir -p DESTDIR/usr/include/llvm/Config
 mv DESTDIR/usr/lib32/llvm-config32 DESTDIR/usr/bin
 mv DESTDIR/usr/lib32/llvm-config-32.h DESTDIR/usr/include/llvm/Config/llvm-config-32.h
 
 cp -rpv DESTDIR/* /pkgs/$PACKAGE/
 rm -rf DESTDIR
 cp -rpv /pkgs/$PACKAGE/* /
 
 
 
 cd /pkgs
 
 
 
 sudo echo "lib32-glibc lib32-libgcc llvm" > /pkgs/$PACKAGE/depends
 sudo tar -cvzpf $PACKAGE.tar.xz $PACKAGE
 sudo cp $PACKAGE.tar.xz /finished
 
 cd /blfs/builds
 sudo rm -r $LLVM_DIR
 
 
cd /blfs/builds

# Build Clang
cd $CLANG_DIR
grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'


mkdir build
cd build


CC=gcc CXX=g++                                  \
cmake -DCMAKE_INSTALL_PREFIX=/usr               \
      -DLLVM_ENABLE_FFI=ON                      \
      -DLLVM_INCLUDE_TESTS=OFF                  \
      -DCMAKE_BUILD_TYPE=Release                \
      -DLLVM_BUILD_LLVM_DYLIB=ON                \
      -DLLVM_ENABLE_RTTI=ON                     \
      -DLLVM_LIBDIR_SUFFIX=32                   \
      -DCMAKE_INSTALL_LIBDIR=/usr/lib32         \
      -DLLVM_TARGETS_TO_BUILD="host;AMDGPU;BPF" \
      -DCLANG_DEFAULT_PIE_ON_LINUX=ON           \
      -Wno-dev -G Ninja ..



ninja


# Install Clang
mkdir -p /pkgs/$PACKAGE2/usr/lib32
DESTDIR=$PWD/DESTDIR ninja install
cp -Rv DESTDIR/usr/lib32/* /pkgs/$PACKAGE2/usr/lib32
rm -rf DESTDIR
cp -rpv /pkgs/$PACKAGE2/* /
cd /pkgs

sudo echo "lib32-llvm" > /pkgs/$PACKAGE2/depends
sudo tar -cvzpf $PACKAGE2.tar.xz $PACKAGE2
sudo cp $PACKAGE2.tar.xz /finished



# Cleanup cmake modules
cd /blfs/builds
sudo rm -r cmake
